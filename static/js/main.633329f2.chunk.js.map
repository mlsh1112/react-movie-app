{"version":3,"sources":["movie.js","App.js","reportWebVitals.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","movie","genres","synopsis","map","index","App","state","_getMovies","a","_callApi","movies","setState","fetch","then","res","json","data","catch","err","console","log","_renderMoives","title_english","medium_cover_image","id","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSA4BA,SAASA,EAAT,GAAmC,IAAbC,EAAY,EAAZA,OAAOC,EAAK,EAALA,IACzB,OACI,qBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,iBAG1D,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACI,uBAAMF,UAAU,eAAhB,UAAgCE,EAAhC,OAcOC,MA7Cf,YAA+C,IAA/BJ,EAA8B,EAA9BA,MAAMH,EAAwB,EAAxBA,OAAOQ,EAAiB,EAAjBA,OAAOC,EAAU,EAAVA,SAChC,OACI,sBAAKL,UAAU,QAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,cAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,MAEtC,sBAAKC,UAAU,gBAAf,UACI,6BAAKD,IACL,qBAAKC,UAAU,eAAf,SAEQI,EAAOE,KAAI,SAACJ,EAAMK,GAAP,OACP,cAACN,EAAD,CAAYC,MAAOA,GAAYK,QAG3C,mBAAGP,UAAU,iBAAb,SACKK,WCiCNG,E,4MA7CbC,MAAM,G,EAMNC,W,sBAAY,4BAAAC,EAAA,sEACW,EAAKC,WADhB,OACJC,EADI,OAEV,EAAKC,SAAS,CACZD,OAASA,IAHD,2C,EAOZD,SAAS,WAEP,OAAOG,MAAM,yDACZC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAE,GAAI,OAAEA,EAAKC,KAAKN,UACrBO,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,O,EAG1BG,cAAgB,WAYZ,OAVY,EAAKf,MAAMI,OAAOP,KAAI,SAAAH,GAElC,OAAO,cAAE,EAAF,CACPJ,MAAOI,EAAMsB,cACb7B,OAAQO,EAAMuB,mBAEdtB,OAAQD,EAAMC,OACdC,SAAUF,EAAME,UAFXF,EAAMwB,Q,uDA1Bf,WACEC,KAAKlB,e,oBAiCP,WACE,OACI,qBAAKV,UAAU,MAAf,SACG4B,KAAKnB,MAAMI,OAASe,KAAKJ,gBAAgB,gB,GAxClCK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.633329f2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './movie.css';\n\nfunction movie({title,poster,genres,synopsis}){\n    return(\n        <div className=\"Movie\">\n            <div className=\"Movie_columns\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie_columns\">\n                <h2>{title}</h2>\n                <div className=\"Movie_genres\">\n                    {\n                        genres.map((genre,index)=>\n                            <MovieGenre genre={genre} key={index}/>)\n                    }\n                </div>\n                <p className=\"Movie_synopsis\"> \n                    {synopsis}\n                </p>\n            </div>\n        </div>\n    )\n}\n\n//dump component\n//funtional component -> no state / no renser / no life cyle/ onlt return\nfunction MoviePoster({poster,alt}){\n    return(\n        <img src={poster} alt={alt} title={alt} className=\"Movie_poster\"/>\n    )\n}\nfunction MovieGenre({genre}){\n    return(\n        <span className=\"Movie_genres\">{genre} </span>\n    )\n}\nmovie.propTypes={\n    title:PropTypes.string.isRequired,\n    poster:PropTypes.string.isRequired,\n    genres:PropTypes.array.isRequired,\n    synopsis:PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes={\n    poster:PropTypes.string.isRequired,\n    alt:PropTypes.string.isRequired\n}\nexport default movie;\n","import { Component } from 'react';\nimport './App.css';\nimport Movie from './movie'\n\n// Render: componentWillMount() -> render() -> compoenetDidMount()\n// Update: componentWillReciveProps() {컴포넌트가 새로운 props를 받았다} -> shouldCompoenentUpdate()\nclass App extends Component {\n  state={}\n  \n  componentDidMount(){\n    this._getMovies();\n  }\n\n  _getMovies= async ()=>{ \n    const movies = await this._callApi(); \n    this.setState({\n      movies : movies\n  })\n}\n\n  _callApi=()=>{\n    //fetch라는 promise를 return 한ㄷㅏ.\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating')\n    .then(res=>res.json())\n    .then(json=>json.data.movies)\n    .catch(err=>console.log(err))\n  }\n\n  _renderMoives = () => {\n    //index를 사용하면 느리다 id로 사용\n    const movies= this.state.movies.map(movie =>{\n      \n      return < Movie \n      title={movie.title_english} \n      poster={movie.medium_cover_image} \n      key={movie.id} \n      genres={movie.genres}\n      synopsis={movie.synopsis}\n       />\n      })\n      return movies\n  }\n\n  render(){\n    return (\n        <div className=\"App\">\n          {this.state.movies ? this._renderMoives():'Loading'}\n        </div>\n      );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}